module scratch where
data nat = zero | suc (n : nat)

data nat = zero
         | suc (n : nat)

-- and definitions can be recursive:
add (m : nat) : nat -> nat = split
  zero -> m
  suc n -> suc (add m n)


Path (A : U) (a b : A) : U = PathP (<_> A) a b


-- 0 + a = a
addZero : (a : nat) -> Path nat (add zero a) a = split
  zero -> <i> zero
  suc a' -> <i> suc (addZero a' @ i)

-- (suc a) + b = suc (a + b)
addSuc (a : nat) : (b : nat) -> Path nat (add (suc a) b) (suc (add a b)) = split
  zero -> <i> suc a
  suc n -> <i> suc (addSuc a n @ i)

-- a + b = b + a
-- prove for b = (n+1):
-- a + (S n) = (S n) + a
-- => S(a + n) = (S n) + a [by computation]
-- 
--
-- suc (add a n)                        (suc n) + a
--  ^                                       ^
--  | suc (add a n)                         | addSuc @ -j
--  |                                       |
-- suc (add a n) --[i=0]-----[i=1]--> suc (add n a)
--                suc (addC a n @ i)
--
--
addC (a : nat) : (b : nat) -> Path nat (add a b) (add b a) = split
  zero -> <i> addZero a @ -i -- a = 0 + a
  suc n -> <i> comp (<_> nat) (suc (addC a n @ i))
                    [ (i = 0) -> <j> suc (add a n)
                    , (i = 1) -> <j> addSuc n a @ -j ]


-- a + (b + c) = (a + b) + c
-- induction on C
-- BASE CASE:
-- a + (b + 0) = (a + b) + 0
--  =[computation] a + (b) = (a + b)
-- a + b = (a + b) [by computation, k + 0 = k, as add is defined by case-split on left]
-- INDUCTIVE HYPOTHESIS: let c = S n:
-- a + (b + S n) = (a + b) + S n
-- =[computation]: a + (S (b + n)) = (a + b) + S n
-- =[computation]: S (a + (b + n)) = (a + b) + S n
-- =[computation]: S (a + (b + n)) = S ((a + b) + n)
--
--
--
--
--
--
-- S(a+(b+n)) - -- -- -- -- -- - S((a+b) + n)
--  ^                                 ^
--  |                                 |
--  |                                 |
-- suc(add a (add b n))               |
--  |                                 |
-- S(a+(b+n)) ------------------ S((a+b)+n)
--           suc (add A a b n @ i)
addA (a b: nat) :  (c: nat) -> Path nat (add a (add b c)) (add (add a b) c) = split
  zero -> <i> add a  b
  suc n -> <i> comp (<_> nat) (suc (addA a b n @ i))
                [ (i = 0) -> <j> suc (add a (add b n))
		, (i = 1) -> <j> suc (add (add a b) n)]


addA (a b: nat) :  (c: nat) -> Path nat (add a (add b c)) (add (add a b) c) = split
  zero -> <i> add a  b
  suc n -> <i> (suc (addA a b n @ i))



-- addSuc2 (a b: nat) : Path nat (add (suc a) b) (suc (add a b)) = 


--
-- addSuc: add (suc a) b = suc (add a b)

-- c=0: add (add a b) 0 = (add (add a 0) b
-- c=0: (add a b) = (add a b)
-- c=Sn:
--- add (add a b) (S n) = add (add a (S n) b)
-- S (add (add a b) n) = add (S (add a n)) b


-- S (add (add a b) n)                      add (S (add a n)) b
-- ^                                                  |
-- |                                                  |
-- |                                                  | addSuc @ -j
-- |                                                  |
-- S (add (add a b) n) ----------------------> S (add (add a n) b)
-- addAC (a b: nat) : (c: nat) -> Path nat (add (add a b) c) (add (add a c) b) = split
--   zero -> <i> add a b
--   suc n -> <i> comp (<_> nat) (suc (addAC a b n @ i))
--                 [ (i = 0) -> <j> suc (add a (add b n))
-- 		, (i = 1) -> <j> (addSuc (add a n) b) @ -j]

